new <%- schema %> {
<%
const valOf = (property, depth) => {
    if (property.default) return property.type === 'string' ? `'${property.default}'` : property.default
    if (property.type === 'boolean') return 'true'
    if (property.type === 'integer') return '000'
    if (property.enum) return `'${property.enum[0]}'`
    if (property.type === 'string') return `"<ENTER VALUE>"`
    if (property.type === 'object') return render(property, depth + 1, property.schema)
    if (property.type === 'array') {
        if (locals.optional) {
            return `new[] { ${property.items.enum ? property.items.enum.map(i => `"${i}"`).join(', ') : property.items.type} }`
        } else {
            return `new[] {\n${'    '.repeat(depth + 1)}${valOf(property.items, depth + 1)},\n${'    '.repeat(depth)}}`
        }
    }
    return
}

properties.forEach((property, i) => {
    let base = property.type === 'array' ? property.items : property
    let schema = base.schema || base.type
    -%>
<%- `${'    '.repeat(depth)}${locals.optional ? '//' : ''}${property.name} = ${valOf(property, depth)}${i < properties.length - 1 ? ',' : ''}` %>
    <%_
})
-%>
<%- '    '.repeat(depth - 1) -%>
}